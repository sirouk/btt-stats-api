{
  "wallet_balance": {
    "data_type": "wallet_balance",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "WalletBalance",
    "start_cell": "A1",
    "include_header": true,
    "handle_existing_filters": false,
    "refresh_interval_minutes": 10,
    "formula": {
      "type": "formula",
      "text": "=SUM(C{0}+D{0})",
      "position": 5
    },
    "params": {}
  },
  "subnet_list": {
    "data_type": "subnet_list",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "SubnetList",
    "start_cell": "A1",
    "include_header": true,
    "refresh_interval_minutes": 15,
    "formula": {
      "type": "python",
      "text": "f\"Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\"",
      "position": -1
    },
    "params": {}
  },
  "subnet_list_history": {
    "data_type": "subnet_list",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "SubnetHistoryLog",
    "start_cell": "A2",
    "include_header": false,
    "append_mode": true,
    "max_rows_limit": 100000,
    "refresh_interval_minutes": 30,
    "formula": {
      "type": "python",
      "text": "f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\"",
      "position": 0
    },
    "params": {}
  },
  "metagraph_sn1": {
    "data_type": "metagraph",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "Metagraph_SN1",
    "start_cell": "A1",
    "include_header": true,
    "refresh_interval_minutes": 15,
    "formula": {
      "type": "python",
      "text": "\"Active\" if row[\"TRUST\"] > 0.5 else \"Inactive\" if row[\"TRUST\"] > 0 else \"Offline\"",
      "position": -1
    },
    "params": {
      "netuids": "1",
      "egrep_keys": []
    }
  },
  "metagraph_sn19": {
    "data_type": "metagraph",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "Metagraph_SN19",
    "start_cell": "A1",
    "include_header": true,
    "refresh_interval_minutes": 45,
    "formula": {
      "type": "python",
      "text": "f\"Last Updated: {(datetime.now() - timedelta(seconds=int(row['UPDATED']))).strftime('%Y-%m-%d %H:%M:%S')}\"",
      "position": -1
    },
    "params": {
      "netuids": "19",
      "egrep_keys": "5.....,5.....,5....."
    }
  },
  "registrations": {
    "data_type": "registrations",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "Registrations",
    "start_cell": "A1",
    "include_header": true,
    "refresh_interval_minutes": 30,
    "formula": {
      "type": "python",
      "text": "f\"SN{row['Subnet']}-{row['Cost']} TAO\" if float(row['Cost']) > 0 else \"Free Registration\"",
      "position": 0
    },
    "params": {}
  },
  "sn19_metrics": {
    "data_type": "sn19_metrics",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "SN19_Metrics",
    "start_cell": "A1",
    "include_header": true,
    "append_mode": true,
    "max_rows_limit": 1000,
    "refresh_interval_minutes": 30,
    "formula": {
      "type": "python",
      "text": "f\"{row['created_at'].strftime('%a, %b %d, %Y')} ({(datetime.now() - row['created_at']).days} days ago)\"",
      "position": -1
    },
    "params": {
      "fetchFileDate": "latest",
      "dateFrom": "2023-07-01",
      "dateTo": "2023-07-31",
      "dataSource": "miner-scores"
    }
  },
  "sn19_recent": {
    "data_type": "sn19_recent",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "SN19_Recent",
    "start_cell": "A1",
    "include_header": true,
    "append_mode": true,
    "max_rows_limit": 500,
    "refresh_interval_minutes": 15,
    "formula": {
      "type": "python",
      "text": "f\"{row['created_at'].strftime('%H:%M:%S')} on {row['created_at'].strftime('%Y-%m-%d')}\"",
      "position": -1
    },
    "params": {
      "hours": 72
    }
  },
  "date_example": {
    "data_type": "subnet_list",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "DateExamples",
    "start_cell": "A1",
    "include_header": true,
    "append_mode": true,
    "max_rows_limit": 100,
    "formula": {
      "type": "python",
      "text": "{\"iso\": datetime.now().isoformat(), \"rfc\": datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z'), \"readable\": datetime.now().strftime('%B %d, %Y at %I:%M %p'), \"custom\": datetime.now().strftime('%Y-%m-%d %H:%M:%S')}[idx % 4 == 0 and \"iso\" or idx % 4 == 1 and \"rfc\" or idx % 4 == 2 and \"readable\" or \"custom\"]",
      "position": -1
    },
    "params": {}
  },
  "historical_balance": {
    "data_type": "wallet_balance",
    "spreadsheet_id": "YOUR_SPREADSHEET_ID",
    "sheet_name": "HistoricalBalance",
    "start_cell": "A1",
    "include_header": true,
    "append_mode": true,
    "max_rows_limit": 2000,
    "refresh_interval_minutes": 20,
    "formula": {
      "type": "python",
      "text": "f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\"",
      "position": 0
    },
    "params": {}
  }
} 